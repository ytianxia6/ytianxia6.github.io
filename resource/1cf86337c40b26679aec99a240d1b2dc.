---
title: 数据结构 
tags: posts, 软考, 软件设计师, 数据结构
grammar_cjkRuby: true
---

# 数据结构

# 数学知识

看了一下数据结构一章，发现不管是数据结构还是算法，都需要数学知识为基础。
先整理一下相关的数学知识

##求和

连加：
$$ 
\sum_{i=1}^ni= 1 + 2 + ... + n = \frac{n(n+1)}{2}
$$

求和
$$
\sum_{i = 1}^{n + 1}(n+1-i)=(n+1)^2 - \frac{(n+1)(n+2)}{2}=(n+1)(n+1-\frac{n}{2}-1)=\frac{n(n+1)}{2}
$$

# 线性结构
线性结构非空时
1. 只有一个第一个元素
2. 只有一个最后一个元素
3. 非头元素只有一个直接前驱
4. 非最后一个元素只有一个直接后继

## 顺序存储

存储结构也是顺序存储。
对元素进行插入时，平均移动元素个数为

$$
\begin{align}
&\sum_{i=1}^{n+1}P_i\times(n-i+1) \\
= &\frac{1}{n+1}\sum_{i=1}^{n+1}(n-i+1)\\
= &\frac{1}{n+1}((n+1)^2-\frac{(n+1)(n+2)}{2})\\
= &\frac{1}{n+1}\times\frac{n(n+1)}{2} \\
= &\frac{n}{2}
\end{align}
$$

对元素进行删除时，平均移动元素个数 为 $\frac{n-1}{2}$

## 链式存储

## 栈

后进先出

## 队列
先进先出


# 非线性结构

## 树
双亲节点
孩子节点
兄弟节点

节点的度
树的深度

## 二叉树
深度为i的二叉树，最多有 $2^i-1$个节点
第i 行，最多有 $2^{i-1}$个元素
满二叉树
```mermaid!
graph TD
   id1((1)) --- id2((2))
   id1((1)) --- id3((3))
   id2((2)) --- id4((4))
   id2((2)) --- id5((5))
   id3((3)) --- id6((6))
   id3((3)) --- id7((7))
```

完全二叉树： 按照层级遍历，顺序与满二叉树一样。即只会缺少最右下角的节点。


## 哈夫曼树
最小带权路径和
权值最小的两棵树构成新树。

## 哈夫曼编码

## 树和森林转换

树转换成二叉树，右必然为空。


# 图
$G=(V,E)$
带有权值的图称为网

## 有向图，无向图
连通
连通图，强连通图
连通分量，强连通分量

## 网

## 搜索

1. 深度优先搜索， 通常使用递归
2. 广度优先搜索，使用队列

## 生成树

生成树、最小生成树

## AOV网，AOE网
AOV网顶点表示活动，边表示活动的先后。

AOE 网顶点表示事件，边表示活动，边上的权值表示活动所需要的时间，常用来评估项目的完成时间。
其中几个比较关键的概念：
1. 顶点事件的最早开始时间
```mathjax!
$$
ve_{(j)} = \begin{cases}
0,    &i = 0  \\
max(ve_{(i)} + dut(< i, j >)), & i,j \in V ; 1 <= j <= n - 1
\end{cases}
$$
```

2. 顶点事件的最晚开始时间

```mathjax!
$$
vl_{(i)} = \begin{cases}
ve_{(n-1)}, &i = n - 1
min(ve_{(j)} - dut(< i,j >)), & i, j \in V; 0 <= i < n - 1
\end{cases}
$$
```

3. 活动$a_k$的最早开始时间
$$
e(k) = ve_{(k)}
$$
  
4. 活动$l(k)$的最晚开始时间， $l(k)$ 对应弧 <i,j>

$$
l(k) = vl(i) - dut(< k,i>)
$$
当 $l(k)==vl(i)$ 时，为关键路径。

## 拓朴排序

有向无环图可以拓补排序，方法是：
1. 取出入度为0的点，移除与之相连的边
2. 重复1

到找不到入度为0的点且没有剩余点时，全部拓朴排序，否则存在环。

## 最短路径

1. 单源点最短路径
取集合$S、T$ ，初始时，S中只有 $v_0$， $T$中为剩余顶点。$S$到$T$中所有元素的最短路径。
取出最短的顶点，加入$S$，更新$T$中剩余元素的最短路径。
重复上述过程。

2. 对每个顶点最短路径

这个算法没有看懂。<i class="fas fa-poo"></i>

